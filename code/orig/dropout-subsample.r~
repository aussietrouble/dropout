library(mnormt)

mbinom = function(n, theta) {
  p = length(theta)
  B = t(matrix(rbinom(n*p, size=1, prob=theta), p, n))
  return(B)
}

banded.Sigma = function(p, rho) {
  S = diag(1,p)
  for (j in 1:p) {
    for (k in 1:p) {
      S[j,k] = rho^abs(j-k)
    }
  }
  cat(sprintf("Generated %d by %d covariance [%f^|i-j|]\n", p, p, rho))
  return(S)
}


gen.banded.data = function(n, p, rho, s=p, sigma=1) {
  Sigma = banded.Sigma(p, rho)
  x = rmnorm(n, mean=rep(0,p), varcov=Sigma)
  x = scale(x)
  x = x/sqrt(n-1)
  beta0 = runif(p, min=5, max=20)
  z = 2*rbinom(p, 1, prob=rep(.5, p))-1
  beta0 = beta0*z
  if (s < p) {
    beta0[(s+1):p] = 0
  }
  y = x %*% beta0 + sigma*rnorm(n)
  return(list(x=x, y=y, Sigma=Sigma, beta0=beta0))
}

soft.threshold = function(x,lambda) {
  return(sign(x) * (abs(x)-lambda) * (abs(x) > lambda))
}

dropout = function(X, Y, beta0, theta0) {
  A = X
  theta = rep(theta0, ncol(X))
  Z = mbinom(nrow(X), theta)
  A = X * Z
  betahat = solve(t(A) %*% A) %*% t(A) %*% Y
  return(betahat)
}

subsample = function(X, Y, beta0, m) {
  n = nrow(X)
  inds = sample(1:n, m)
  A = X[inds, ]
  W = Y[inds, ]
  betahat = solve(t(A) %*% A) %*% t(A) %*% W
  return(betahat)
}

doss = function(n, p, thetas, sigma=1, rho=0, seed=NA) {
  if (!is.na(seed)) {
    set.seed(seed)
  }
  dat = gen.banded.data(n, p, rho, p, sigma)
  beta0 = dat$beta0
  do.error = rep(0, length(thetas))
  for (i in 1:length(thetas)) {
    betahat = dropout(dat$x, dat$y, beta0=beta0, theta0=thetas[i])
    error = sqrt(sum((betahat-beta0)^2))
    cat(sprintf("theta=%.3f  nnz/p=%.0f  error=%.3f\n", thetas[i], n*thetas[i], error))
    do.error[i] = error
  }

  ms = round(thetas*n/p)
  ss.error = rep(0, length(thetas))
  for (i in 1:length(ms)) {
    betahat = subsample(dat$x, dat$y, beta0=beta0, ms[i])
    error = sqrt(sum((betahat-beta0)^2))
    cat(sprintf("m=%d  m*p=%.0f  error=%.3f\n", ms[i], ms[i]*p, error))
    ss.error[i] = error
  }
}




